from typing import Dict, List
import math
import statistics
import pandas as pd
import numpy as np
from datamodel import OrderDepth, TradingState, Order


class Trader:

  def __init__(self):
    # dictionary of lists
    self.stateHistory = []
    self.enteredLong = False
    self.enteredShort = False
    self.prevValue = 0
    self.time = 0
    self.r4long = False
    self.r4short = False

  def updateProductHist(self, productName, state, ifPop):

    self.stateHistory.append(state)
    startDay = 0 if not ifPop else len(self.stateHistory) - 6
    order_depth_hist = [
      i.order_depths[productName] for i in self.stateHistory[startDay:-1]
    ]
    sell_orders_hist = [i.sell_orders for i in order_depth_hist]
    buy_orders_hist = [i.buy_orders for i in order_depth_hist]

    best_ask_hist = [[min(orders.keys()), orders[min(orders.keys())]] \
                    for orders in sell_orders_hist]
    best_bid_hist = [[max(orders.keys()), orders[max(orders.keys())]] \
                    for orders in buy_orders_hist]

    best_ask_vol_hist = [i[1] for i in best_ask_hist]
    best_bid_vol_hist = [i[1] for i in best_bid_hist]
    best_ask_hist = [i[0] for i in best_bid_hist]
    best_bid_hist = [i[0] for i in best_bid_hist]

    return best_ask_hist, best_ask_vol_hist, best_bid_hist, best_bid_vol_hist

  def run(self, state: TradingState):
    """
        Only method required. It takes all buy and sell orders for all symbols as an input,
        and outputs a list of orders to be sent
    """
    # Initialize the method output dict as an empty dict
    result = {}
    rf_orders = []
    product = 'RAINFOREST_RESIN'
    position = state.position.get(product, 0)
    limit = 50
    base_size = 10

    order_depth = state.order_depths[product]
    best_bid = max(order_depth.buy_orders.keys())
    best_ask = min(order_depth.sell_orders.keys())
    best_bid_volume = order_depth.buy_orders[best_bid]
    best_ask_volume = order_depth.sell_orders[best_ask]

    spread = best_ask - best_bid
    fair_value = 10000

    # === Improved quoting logic ===

    # Quote skew based on inventory
    skew = int(-position * 0.05)

    # Adaptive quoting (inside spread if wide)
    if spread >= 4:
        my_bid = best_bid + 1 + skew
        my_ask = best_ask - 1 + skew
    else:
        my_bid = 9999 + skew
        my_ask = 10001 + skew

    # Clamp to outer bounds
    my_bid = min(my_bid, 9999)
    my_ask = max(my_ask, 10001)

    # Size adjustment â€” larger when flat
    size = base_size + max(0, (limit - abs(position)) // 10)

    # === Inventory-safe quoting ===
    buyable = max(0, limit - position)
    sellable = max(0, limit + position)

    if buyable > 0:
        rf_orders.append(Order(product, my_bid, min(size, buyable)))
    if sellable > 0:
        rf_orders.append(Order(product, my_ask, -min(size, sellable)))

    # === Light trimming logic (only if within safe bounds)
    if 40 > position >= 30:
        trim_size = min(5, best_bid_volume, sellable)
        if trim_size > 0:
            rf_orders.append(Order(product, best_bid, -trim_size))
    elif -40 < position <= -30:
        trim_size = min(5, best_ask_volume, buyable)
        if trim_size > 0:
            rf_orders.append(Order(product, best_ask, trim_size))

    # === Hard cut at edges (no limit breach)
    if position >= 40:
        cut_size = min(10, best_bid_volume, sellable)
        if cut_size > 0:
            rf_orders.append(Order(product, best_bid, -cut_size))
    elif position <= -40:
        cut_size = min(10, best_ask_volume, buyable)
        if cut_size > 0:
            rf_orders.append(Order(product, best_ask, cut_size))

    # === Finalize output
    result[product] = rf_orders
    self.time += 1
    traderData = 'ZZY'
    conversions = 0
    return result, conversions, traderData
